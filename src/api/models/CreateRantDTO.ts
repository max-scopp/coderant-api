/* tslint:disable */
/* eslint-disable */
/**
 * drant-community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateRantDTO
 */
export interface CreateRantDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateRantDTO
     */
    content: string;
    /**
     * If sent as `multipart/form-data`, provide a binary file,
     * however, you cannot sent binary files using `application/json`.
     * 
     * In that case, you can encode the file as base64, in the following format:
     * `data:[<mediatype>][;base64],<data>`
     * 
     * Please be aware of the limitations of using a base64 file upload.
     * The file limit is calculated BEFORE the base64 file is unpacked.
     * @type {Blob}
     * @memberof CreateRantDTO
     */
    asset?: Blob;
    /**
     * You can provide tags either comma-seperated or as array directly.
     * Make sure to provide at least one of the following tags:
     * `INSERT`
     * 
     * Otherwise, the creation will fail.
     * @type {Array<string>}
     * @memberof CreateRantDTO
     */
    tags: Array<string>;
}

export function CreateRantDTOFromJSON(json: any): CreateRantDTO {
    return CreateRantDTOFromJSONTyped(json, false);
}

export function CreateRantDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateRantDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'content': json['content'],
        'asset': !exists(json, 'asset') ? undefined : json['asset'],
        'tags': json['tags'],
    };
}

export function CreateRantDTOToJSON(value?: CreateRantDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'content': value.content,
        'asset': value.asset,
        'tags': value.tags,
    };
}


